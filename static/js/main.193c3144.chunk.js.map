{"version":3,"sources":["drawing-utils.ts","timeline-store.ts","helper-utils.ts","drawing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createNewDrawing","data","id","newUUID","mutateDrawing","charSet","map","char","Math","random","sample","mutateWhiteSpace","mutateChar","mirrorChar","useTimeline","drawings","useState","createTimeline","timeline","setTimeline","timelineTree","currTimelineNode","recordedDrawings","navigateToForkInTime","step","prev","prevNode","numForks","nextNodes","length","m","currForkIdx","findIndex","node","nextForkIdx","currDrawings","drawingId","currPicked","picked","handlePick","pickedDrawing","newDrawings","updatedCurrTimelineNode","createTimelineNode","newTimelineNode","newTimelineTree","lastNode","keyBy","drawing","backInTime","targetTimelineNode","forwardInTime","nextForkInTime","prevForkInTime","reset","firstNode","newNode","push","Drawing","isPicked","onPick","drawingText","style","display","flex","alignItems","justifyContent","className","padding","background","cursor","position","onClick","bottom","left","e","stopPropagation","navigator","clipboard","writeText","numCols","floor","numDrawings","initialDrawings","getNewDrawings","times","numRows","wingLen","pSpace","p","min","drawingData","rndChar","getRandomDrawing","App","drawingsContainerRef","useRef","a","drawingsContainer","current","fileName","prompt","html2canvas","canvasEl","dataUrl","toDataURL","link","document","createElement","download","href","click","coordinatesToDrawingIdx","rowIdx","colIdx","texts","chunk","row","middle","last","leftWing","initial","rightWing","reverse","join","drawingToText","height","fontSize","flexDirection","ref","key","drawingIdx","updatedDrawings","slice","handleClickOnDrawing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.193c3144.chunk.js","sourcesContent":["import { times, sample, chunk, initial, last } from 'lodash';\r\nimport { Drawing, DrawingData } from './timeline-store';\r\nimport { v4 as newUUID } from 'uuid';\r\n\r\ninterface DrawingOptions {\r\n    pSpace?: number;\r\n}\r\n\r\nexport function getRandomDrawing(\r\n    charSet: string[],\r\n    numRows: number,\r\n    wingLen: number,\r\n    { pSpace = 0.5 }: DrawingOptions = {}\r\n): Drawing {\r\n    const p = Math.min(pSpace, 1);\r\n\r\n    const drawingData: string[] = [];\r\n\r\n    times(numRows, () => {\r\n        times(wingLen + 1, () => {\r\n            const rndChar =\r\n                p > Math.random() ? ' ' : (sample(charSet) as string);\r\n            drawingData.push(rndChar);\r\n        });\r\n    });\r\n\r\n    return createNewDrawing(drawingData);\r\n}\r\n\r\nexport function createNewDrawing(data: DrawingData): Drawing {\r\n    return {\r\n        id: newUUID(),\r\n        data,\r\n    };\r\n}\r\n\r\nexport function drawingToText({ data }: Drawing, wingLen: number): string {\r\n    return chunk(data, wingLen + 1)\r\n        .map((row) => {\r\n            const middle = last(row);\r\n            const leftWing = initial(row);\r\n            const rightWing = leftWing.map(mirrorChar).reverse();\r\n            return [...leftWing, middle, ...rightWing].join('');\r\n        })\r\n        .join('\\n');\r\n}\r\n\r\nexport function mutateDrawing(\r\n    data: DrawingData,\r\n    charSet: string[]\r\n): DrawingData {\r\n    return data.map((char) => mutateChar(char, charSet));\r\n}\r\n\r\nexport function mutateChar(char: string, charSet: string[]): string {\r\n    if (Math.random() > 0.15) return char;\r\n\r\n    return char === ' '\r\n        ? mutateWhiteSpace(char, charSet)\r\n        : Math.random() < 0.3\r\n        ? ' '\r\n        : (sample(charSet) as string);\r\n}\r\n\r\nexport function mutateWhiteSpace(char: string, charSet: string[]): string {\r\n    return Math.random() < 0.3 ? (sample(charSet) as string) : char;\r\n}\r\n\r\nfunction mirrorChar(char: string): string {\r\n    switch (char) {\r\n        case '/':\r\n            return '\\\\';\r\n        case '\\\\':\r\n            return '/';\r\n        case '[':\r\n            return ']';\r\n        case ']':\r\n            return '[';\r\n        case '<':\r\n            return '>';\r\n        case '>':\r\n            return '<';\r\n        case '{':\r\n            return '}';\r\n        case '}':\r\n            return '{';\r\n        case '(':\r\n            return ')';\r\n        case ')':\r\n            return '(';\r\n        case 'b':\r\n            return 'd';\r\n        case 'd':\r\n            return 'b';\r\n        // case 'M':\r\n        //     return 'W';\r\n        // case 'W':\r\n        //     return 'M';\r\n        // case 'm':\r\n        //     return 'w';\r\n        // case 'w':\r\n        //     return 'm';\r\n        default:\r\n            return char;\r\n    }\r\n}\r\n","import { v4 as newUUID } from 'uuid';\r\nimport { keyBy } from 'lodash';\r\nimport { useState } from 'react';\r\nimport { modulo } from './helper-utils';\r\n\r\nexport type DrawingData = string[];\r\n\r\nexport interface Drawing {\r\n    id: string;\r\n    data: DrawingData;\r\n}\r\n\r\ninterface TimelineNode {\r\n    id: string;\r\n    drawings: string[];\r\n    prevNode: TimelineNode | null;\r\n    nextNodes: TimelineNode[];\r\n    picked?: string;\r\n}\r\n\r\ninterface TimelineTree {\r\n    id: string;\r\n    firstNode: TimelineNode;\r\n    lastNode: TimelineNode;\r\n}\r\n\r\ninterface Timeline {\r\n    timelineTree: TimelineTree;\r\n    currTimelineNode: TimelineNode;\r\n    recordedDrawings: { [drawingId: string]: Drawing };\r\n}\r\n\r\nexport function useTimeline(drawings: Drawing[]) {\r\n    const [timeline, setTimeline] = useState(createTimeline(drawings));\r\n\r\n    const { timelineTree, currTimelineNode, recordedDrawings } = timeline;\r\n\r\n    function isInPast(): boolean {\r\n        return currTimelineNode.nextNodes.length > 0;\r\n    }\r\n\r\n    function getTimelineNodeDrawings(timelineNode: TimelineNode): Drawing[] {\r\n        return timelineNode.drawings.map(\r\n            (drawingId) => recordedDrawings[drawingId]\r\n        );\r\n    }\r\n\r\n    function handlePick(pickedDrawing: Drawing, newDrawings: Drawing[]) {\r\n        const updatedCurrTimelineNode = isInPast()\r\n            ? createTimelineNode(\r\n                  getTimelineNodeDrawings(currTimelineNode),\r\n                  currTimelineNode.prevNode\r\n              )\r\n            : currTimelineNode;\r\n\r\n        updatedCurrTimelineNode.picked = pickedDrawing.id;\r\n\r\n        const newTimelineNode = createTimelineNode(\r\n            newDrawings,\r\n            updatedCurrTimelineNode\r\n        );\r\n\r\n        const newTimelineTree: TimelineTree =\r\n            updatedCurrTimelineNode === timelineTree?.lastNode\r\n                ? {\r\n                      ...timelineTree,\r\n                      lastNode: newTimelineNode,\r\n                  }\r\n                : timelineTree;\r\n\r\n        setTimeline({\r\n            timelineTree: newTimelineTree,\r\n            currTimelineNode: newTimelineNode,\r\n            recordedDrawings: {\r\n                ...recordedDrawings,\r\n                ...keyBy(newDrawings, (drawing) => drawing.id),\r\n            },\r\n        });\r\n    }\r\n\r\n    function reset(drawings: Drawing[]) {\r\n        setTimeline(createTimeline(drawings));\r\n    }\r\n\r\n    function backInTime() {\r\n        const targetTimelineNode = currTimelineNode?.prevNode ?? null;\r\n\r\n        if (targetTimelineNode) {\r\n            setTimeline({\r\n                ...timeline,\r\n                currTimelineNode: targetTimelineNode,\r\n            });\r\n        }\r\n    }\r\n\r\n    function forwardInTime() {\r\n        const [targetTimelineNode] = currTimelineNode?.nextNodes ?? [];\r\n\r\n        if (targetTimelineNode) {\r\n            setTimeline({\r\n                ...timeline,\r\n                currTimelineNode: targetTimelineNode,\r\n            });\r\n        }\r\n    }\r\n\r\n    function nextForkInTime() {\r\n        navigateToForkInTime(1);\r\n    }\r\n\r\n    function prevForkInTime() {\r\n        navigateToForkInTime(-1);\r\n    }\r\n\r\n    function navigateToForkInTime(step: number) {\r\n        const prev = currTimelineNode.prevNode;\r\n\r\n        if (!prev) return;\r\n\r\n        const numForks = prev.nextNodes.length;\r\n\r\n        if (numForks <= 1) return;\r\n\r\n        const currForkIdx = prev.nextNodes.findIndex(\r\n            (node) => node === currTimelineNode\r\n        );\r\n        const nextForkIdx = modulo(currForkIdx + step, numForks);\r\n\r\n        setTimeline({\r\n            ...timeline,\r\n            currTimelineNode: prev.nextNodes[nextForkIdx],\r\n        });\r\n    }\r\n\r\n    const currDrawings = currTimelineNode.drawings.map(\r\n        (drawingId) => recordedDrawings[drawingId]\r\n    );\r\n\r\n    const currPicked = currTimelineNode.picked\r\n        ? recordedDrawings[currTimelineNode.picked]\r\n        : null;\r\n\r\n    return {\r\n        currDrawings,\r\n        currPicked,\r\n        handlePick,\r\n        backInTime,\r\n        forwardInTime,\r\n        nextForkInTime,\r\n        prevForkInTime,\r\n        reset,\r\n    };\r\n}\r\n\r\nfunction createTimeline(drawings: Drawing[]): Timeline {\r\n    const recordedDrawings = keyBy(drawings, (drawing) => drawing.id);\r\n    const currTimelineNode = createTimelineNode(drawings, null);\r\n    const timelineTree = {\r\n        id: newUUID(),\r\n        firstNode: currTimelineNode,\r\n        lastNode: currTimelineNode,\r\n    };\r\n\r\n    return {\r\n        timelineTree,\r\n        currTimelineNode,\r\n        recordedDrawings,\r\n    };\r\n}\r\n\r\nfunction createTimelineNode(\r\n    drawings: Drawing[],\r\n    prevNode: TimelineNode | null\r\n): TimelineNode {\r\n    const newNode: TimelineNode = {\r\n        id: newUUID(),\r\n        drawings: drawings.map((drawing) => drawing.id),\r\n        prevNode,\r\n        nextNodes: [],\r\n    };\r\n\r\n    newNode.prevNode?.nextNodes.push(newNode);\r\n\r\n    return newNode;\r\n}\r\n","export function modulo(n: number, m: number) {\r\n    return ((n % m) + m) % m;\r\n}\r\n","import React from 'react';\r\n\r\nimport './drawing.css';\r\n\r\ninterface DrawingProps {\r\n    drawingText: string;\r\n    isPicked: boolean;\r\n    onPick: () => void;\r\n}\r\n\r\nexport function Drawing({ isPicked, onPick, drawingText }: DrawingProps) {\r\n    function handleCopy(e: React.MouseEvent) {\r\n        e.stopPropagation();\r\n        return navigator.clipboard.writeText(drawingText);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: 1,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}\r\n        >\r\n            <div\r\n                className=\"drawing-container\"\r\n                style={{\r\n                    padding: '20px 100px',\r\n                    background: isPicked ? 'lightgreen' : 'lightgrey',\r\n                    cursor: 'pointer',\r\n                    position: 'relative',\r\n                }}\r\n                onClick={onPick}\r\n            >\r\n                <pre>{drawingText}</pre>\r\n                <div\r\n                    className=\"drawing-actions-bar\"\r\n                    style={{\r\n                        position: 'absolute',\r\n                        padding: 5,\r\n                        bottom: 0,\r\n                        left: 0,\r\n                    }}\r\n                >\r\n                    <button style={{ cursor: 'pointer' }} onClick={handleCopy}>\r\n                        copy\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useRef } from 'react';\nimport { times } from 'lodash';\nimport html2canvas from 'html2canvas';\nimport {\n    getRandomDrawing,\n    drawingToText,\n    createNewDrawing,\n    mutateDrawing,\n} from './drawing-utils';\nimport './App.css';\nimport { useTimeline } from './timeline-store';\nimport { Drawing } from './drawing';\n\nconst fontSize = 20;\n\nconst charSet = ['d', 'b', '|', '\\\\', '/', '.', '=', '{', '}', '*', '^', '<', '>', 'o', 'O']\nconst numRows = 10;\nconst wingLen = 4;\nconst pSpace = 0.75;\n\nconst numDrawings = 6;\nconst numTileRows = 2;\nconst numCols = Math.floor(numDrawings / numTileRows);\n\n// init\nconst initialDrawings = getNewDrawings();\n\nfunction getNewDrawings() {\n    return times(numDrawings, () =>\n        getRandomDrawing(charSet, numRows, wingLen, { pSpace })\n    );\n}\n\nfunction App() {\n    const {\n        currDrawings: drawings,\n        currPicked,\n        handlePick,\n        backInTime,\n        forwardInTime,\n        nextForkInTime,\n        prevForkInTime,\n        reset,\n    } = useTimeline(initialDrawings);\n    const drawingsContainerRef = useRef<HTMLDivElement>(null);\n\n    function handleReset() {\n        const newDrawings = getNewDrawings();\n        reset(newDrawings);\n    }\n\n    function handleClickOnDrawing(drawingIdx: number) {\n        const picked = drawings[drawingIdx];\n        const newDrawings = times(numDrawings - 1, () =>\n            createNewDrawing(mutateDrawing(picked.data, charSet))\n        );\n\n        const updatedDrawings = [\n            ...newDrawings.slice(0, drawingIdx),\n            picked,\n            ...newDrawings.slice(drawingIdx),\n        ];\n\n        handlePick(picked, updatedDrawings);\n    }\n\n    async function handleDownloadImage() {\n        const drawingsContainer = drawingsContainerRef.current;\n\n        if (!drawingsContainer) return;\n\n        const fileName = prompt('Please enter the file name:', 'characters');\n\n        if (!fileName) return;\n\n        const canvasEl = await html2canvas(drawingsContainer);\n\n        const dataUrl = canvasEl.toDataURL('jpg');\n        const link = document.createElement('a');\n        link.download = `${fileName}.jpg`;\n        link.href = dataUrl;\n\n        link.click();\n    }\n\n    function coordinatesToDrawingIdx(rowIdx: number, colIdx: number) {\n        return colIdx + rowIdx * numCols;\n    }\n\n    const texts = drawings.map((drawing) => drawingToText(drawing, wingLen));\n\n    return (\n        <div style={{ height: '100vh', fontSize }} className=\"App\">\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                }}\n            >\n                <div>\n                    <button onClick={handleReset}>Refresh</button>\n                    <button onClick={prevForkInTime}>prev fork</button>\n                    <button onClick={nextForkInTime}>next fork</button>\n                    <button onClick={backInTime}>Back</button>\n                    <button onClick={forwardInTime}>Forward</button>\n                    <button onClick={handleDownloadImage}>\n                        Download as image\n                    </button>\n                </div>\n                <div\n                    ref={drawingsContainerRef}\n                    style={{\n                        flex: 1,\n                        display: 'flex',\n                        flexDirection: 'column',\n                    }}\n                >\n                    {times(numTileRows, (rowIdx) => (\n                        <div key={rowIdx} style={{ display: 'flex', flex: 1 }}>\n                            {times(numCols, (colIdx) => (\n                                <Drawing\n                                    key={\n                                        drawings[\n                                            coordinatesToDrawingIdx(\n                                                rowIdx,\n                                                colIdx\n                                            )\n                                        ].id\n                                    }\n                                    drawingText={\n                                        texts[\n                                            coordinatesToDrawingIdx(\n                                                rowIdx,\n                                                colIdx\n                                            )\n                                        ]\n                                    }\n                                    isPicked={\n                                        drawings[\n                                            coordinatesToDrawingIdx(\n                                                rowIdx,\n                                                colIdx\n                                            )\n                                        ] === currPicked\n                                    }\n                                    onPick={() =>\n                                        handleClickOnDrawing(\n                                            coordinatesToDrawingIdx(\n                                                rowIdx,\n                                                colIdx\n                                            )\n                                        )\n                                    }\n                                />\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}